/**
 * @fileoverview Firestore Security Rules.
 *
 * Core Philosophy: This ruleset enforces a strict user-ownership model for most data,
 * with public read access to a few designated collections (e.g., Allergens).
 *
 * Data Structure: Most data is nested under /users/{userId} to enforce ownership.
 * Outlets, Ingredients, Recipes and their related subcollections follow this pattern.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Allergens are publicly readable but only writable by backend admin processes (not defined in this ruleset).
 * - Default security posture for ambiguous relationships is strict owner-only access.
 * - All writes require authentication (`request.auth != null`).
 *
 * Denormalization for Authorization: The `userId` is often denormalized onto documents
 * (e.g., in Outlets) to avoid costly `get()` calls in the rules. This allows direct
 * verification of ownership using `resource.data.userId`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     * @path N/A (Helper function)
     * @allow N/A (Helper function)
     * @deny N/A (Helper function)
     * @principle Authentication required for all protected paths.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Defines access rules for user profiles.
     * @path /users/{userId}
     * @allow (get, create, update, delete) If the user is signed in.
     * @principle All authenticated users have the same permissions.
     */
    match /users/{userId} {
      allow get, create, update, delete: if isSignedIn();
      allow list: if isSignedIn();
    }

    /**
     * @description Defines access rules for outlets.
     * @path /outlets/{outletId}
     * @allow (get, list, create, update, delete) If the user is signed in.
     * @principle All authenticated users have the same permissions.
     */
    match /outlets/{outletId} {
      allow get, list, create, update, delete: if isSignedIn();
    }

    /**
     * @description Defines access rules for inventory items within a specific outlet.
     * @path /outlets/{outletId}/inventoryItems/{inventoryItemId}
     * @allow (get, list, create, update, delete) If the user is signed in.
     * @principle All authenticated users have the same permissions.
     */
    match /outlets/{outletId}/inventoryItems/{inventoryItemId} {
      allow get, list, create, update, delete: if isSignedIn();
    }

    /**
     * @description Defines access rules for ingredients managed by a specific user.
     * @path /ingredients/{ingredientId}
     * @allow (get, list, create, update, delete) If the user is signed in.
     * @principle All authenticated users have the same permissions.
     */
    match /ingredients/{ingredientId} {
      allow get, list, create, update, delete: if isSignedIn();
    }

    /**
     * @description Defines access rules for allergens. Publicly readable, but write access restricted to admin roles.
     * @path /allergens/{allergenId}
     * @allow (get, list) Allows public read access to allergens.
     * @deny (create, update, delete) Denies all write access to allergens for non-admin users.
     * @principle Public read access with restricted write access for allergens.
     */
    match /allergens/{allergenId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role check
    }

    /**
     * @description Defines access rules for recipes created by a specific user.
     * @path /recipes/{recipeId}
     * @allow (get, list, create, update, delete) If the user is signed in.
     * @principle All authenticated users have the same permissions.
     */
    match /recipes/{recipeId} {
      allow get, list, create, update, delete: if isSignedIn();
    }

    /**
     * @description Defines access rules for recipe ingredients within a specific recipe.
     * @path /recipes/{recipeId}/recipeIngredients/{recipeIngredientId}
     * @allow (get, list, create, update, delete) If the user is signed in.
     * @principle All authenticated users have the same permissions.
     */
    match /recipes/{recipeId}/recipeIngredients/{recipeIngredientId} {
      allow get, list, create, update, delete: if isSignedIn();
    }

    /**
     * @description Defines access rules for menu items within a specific outlet.
     * @path /outlets/{outletId}/menuItems/{menuItemId}
     * @allow (get, list, create, update, delete) If the user is signed in.
     * @principle All authenticated users have the same permissions.
     */
    match /outlets/{outletId}/menuItems/{menuItemId} {
      allow get, list, create, update, delete: if isSignedIn();
    }

    /**
     * @description Defines access rules for sales logs within a specific outlet.
     * @path /outlets/{outletId}/salesLogs/{salesLogId}
     * @allow (get, list, create, update, delete) If the user is signed in.
     * @principle All authenticated users have the same permissions.
     */
    match /outlets/{outletId}/salesLogs/{salesLogId} {
      allow get, list, create, update, delete: if isSignedIn();
    }

    /**
     * @description Defines access rules for stock take events within a specific outlet.
     * @path /outlets/{outletId}/stockTakes/{stockTakeId}
     * @allow (get, list, create, update, delete) If the user is signed in.
     * @principle All authenticated users have the same permissions.
     */
    match /outlets/{outletId}/stockTakes/{stockTakeId} {
      allow get, list, create, update, delete: if isSignedIn();
    }

    /**
     * @description Defines access rules for stock take items within a specific stock take event.
     * @path /outlets/{outletId}/stockTakes/{stockTakeId}/stockTakeItems/{stockTakeItemId}
     * @allow (get, list, create, update, delete) If the user is signed in.
     * @principle All authenticated users have the same permissions.
     */
    match /outlets/{outletId}/stockTakes/{stockTakeId}/stockTakeItems/{stockTakeItemId} {
      allow get, list, create, update, delete: if isSignedIn();
    }

    /**
     * @description Defines access rules for fabrications for a specific ingredient.
     * @path /ingredients/{ingredientId}/fabrications/{fabricationId}
     * @allow (get, list, create, update, delete) If the user is signed in.
     * @principle All authenticated users have the same permissions.
     */
    match /ingredients/{ingredientId}/fabrications/{fabricationId} {
      allow get, list, create, update, delete: if isSignedIn();
    }

    /**
     * @description Defines access rules for fabrication yields within a specific fabrication.
     * @path /ingredients/{ingredientId}/fabrications/{fabricationId}/fabricationYields/{fabricationYieldId}
     * @allow (get, list, create, update, delete) If the user is signed in.
     * @principle All authenticated users have the same permissions.
     */
    match /ingredients/{ingredientId}/fabrications/{fabricationId}/fabricationYields/{fabricationYieldId} {
      allow get, list, create, update, delete: if isSignedIn();
    }
    
    /**
     * @description Denies access to the 'sales' collection.
     * @path /sales
     * @allow None
     * @deny All operations on the 'sales' collection.
     * @principle Explicitly deny access to a specific collection to enhance security.
     */
    match /sales/{document} {
        allow get, list, create, update, delete: if false;
    }
  }
}