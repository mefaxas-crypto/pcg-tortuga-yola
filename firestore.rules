/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for most data, with public read access for the "allergens" collection. It uses path-based authorization to ensure that users can only access data they own.
 *
 * Data Structure:
 * - User-specific data is nested under `/users/{userId}/...`. This includes outlets, ingredients, recipes, and their associated subcollections.
 * - Allergens are stored in a top-level `/allergens` collection, intended for public read access.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - Write access to the `/allergens` collection is denied to regular users, assuming it is managed by admins through other means.
 *
 * Denormalization for Authorization:
 * - The `userId` field within documents nested under `/users/{userId}` subcollections (e.g., `/users/{userId}/outlets/{outletId}`) is used to enforce ownership.
 *   This avoids the need for costly `get()` calls to verify ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own user document.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile.
     * @allow (get) - Authenticated user can read their own profile.
     * @allow (update) - Authenticated user can update their own profile.
     * @allow (delete) - Authenticated user can delete their own profile.
     * @deny (create) - Unauthenticated user cannot create a profile.
     * @deny (update) - User cannot update another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows users to manage their outlets.
     * @path /users/{userId}/outlets/{outletId}
     * @allow (create) - Authenticated user can create an outlet for themselves.
     * @allow (get) - Authenticated user can read their own outlet.
     * @allow (update) - Authenticated user can update their own outlet.
     * @allow (delete) - Authenticated user can delete their own outlet.
     * @deny (create) - User cannot create an outlet for another user.
     * @deny (update) - User cannot update another user's outlet.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/outlets/{outletId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource.data != null;
      }
      
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows users to manage inventory items for their outlets.
     * @path /users/{userId}/outlets/{outletId}/inventoryItems/{inventoryItemId}
     * @allow (create) - Authenticated user can create an inventory item for their outlet.
     * @allow (get) - Authenticated user can read their own inventory item.
     * @allow (update) - Authenticated user can update their own inventory item.
     * @allow (delete) - Authenticated user can delete their own inventory item.
     * @deny (create) - User cannot create an inventory item for another user's outlet.
     * @deny (update) - User cannot update another user's inventory item.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/outlets/{outletId}/inventoryItems/{inventoryItemId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource.data != null;
      }
      
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows users to manage their ingredients.
     * @path /users/{userId}/ingredients/{ingredientId}
     * @allow (create) - Authenticated user can create an ingredient for themselves.
     * @allow (get) - Authenticated user can read their own ingredient.
     * @allow (update) - Authenticated user can update their own ingredient.
     * @allow (delete) - Authenticated user can delete their own ingredient.
     * @deny (create) - User cannot create an ingredient for another user.
     * @deny (update) - User cannot update another user's ingredient.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/ingredients/{ingredientId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource.data != null;
      }
      
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to allergens, but restricts write access.
     * @path /allergens/{allergenId}
     * @allow (get) - Anyone can read allergen information.
     * @deny (create) - Only admins can create allergens (assumed to be managed externally).
     * @deny (update) - Only admins can update allergens (assumed to be managed externally).
     * @deny (delete) - Only admins can delete allergens (assumed to be managed externally).
     * @principle Public read with restricted writes.
     */
    match /allergens/{allergenId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows users to manage their recipes.
     * @path /users/{userId}/recipes/{recipeId}
     * @allow (create) - Authenticated user can create a recipe for themselves.
     * @allow (get) - Authenticated user can read their own recipe.
     * @allow (update) - Authenticated user can update their own recipe.
     * @allow (delete) - Authenticated user can delete their own recipe.
     * @deny (create) - User cannot create a recipe for another user.
     * @deny (update) - User cannot update another user's recipe.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/recipes/{recipeId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource.data != null;
      }
      
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows users to manage recipe ingredients for their recipes.
     * @path /users/{userId}/recipes/{recipeId}/recipeIngredients/{recipeIngredientId}
     * @allow (create) - Authenticated user can create a recipe ingredient for their recipe.
     * @allow (get) - Authenticated user can read their own recipe ingredient.
     * @allow (update) - Authenticated user can update their own recipe ingredient.
     * @allow (delete) - Authenticated user can delete their own recipe ingredient.
     * @deny (create) - User cannot create a recipe ingredient for another user's recipe.
     * @deny (update) - User cannot update another user's recipe ingredient.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/recipes/{recipeId}/recipeIngredients/{recipeIngredientId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource.data != null;
      }
      
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows users to manage menu items for their outlets.
     * @path /users/{userId}/outlets/{outletId}/menuItems/{menuItemId}
     * @allow (create) - Authenticated user can create a menu item for their outlet.
     * @allow (get) - Authenticated user can read their own menu item.
     * @allow (update) - Authenticated user can update their own menu item.
     * @allow (delete) - Authenticated user can delete their own menu item.
     * @deny (create) - User cannot create a menu item for another user's outlet.
     * @deny (update) - User cannot update another user's menu item.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/outlets/{outletId}/menuItems/{menuItemId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource.data != null;
      }
      
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows users to manage sales logs for their outlets.
     * @path /users/{userId}/outlets/{outletId}/salesLogs/{salesLogId}
     * @allow (create) - Authenticated user can create a sales log for their outlet.
     * @allow (get) - Authenticated user can read their own sales log.
     * @allow (update) - Authenticated user can update their own sales log.
     * @allow (delete) - Authenticated user can delete their own sales log.
     * @deny (create) - User cannot create a sales log for another user's outlet.
     * @deny (update) - User cannot update another user's sales log.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/outlets/{outletId}/salesLogs/{salesLogId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource.data != null;
      }
      
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows users to manage stock takes for their outlets.
     * @path /users/{userId}/outlets/{outletId}/stockTakes/{stockTakeId}
     * @allow (create) - Authenticated user can create a stock take for their outlet.
     * @allow (get) - Authenticated user can read their own stock take.
     * @allow (update) - Authenticated user can update their own stock take.
     * @allow (delete) - Authenticated user can delete their own stock take.
     * @deny (create) - User cannot create a stock take for another user's outlet.
     * @deny (update) - User cannot update another user's stock take.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/outlets/{outletId}/stockTakes/{stockTakeId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource.data != null;
      }
      
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows users to manage stock take items for their stock takes.
     * @path /users/{userId}/outlets/{outletId}/stockTakes/{stockTakeId}/stockTakeItems/{stockTakeItemId}
     * @allow (create) - Authenticated user can create a stock take item for their stock take.
     * @allow (get) - Authenticated user can read their own stock take item.
     * @allow (update) - Authenticated user can update their own stock take item.
     * @allow (delete) - Authenticated user can delete their own stock take item.
     * @deny (create) - User cannot create a stock take item for another user's stock take.
     * @deny (update) - User cannot update another user's stock take item.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/outlets/{outletId}/stockTakes/{stockTakeId}/stockTakeItems/{stockTakeItemId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource.data != null;
      }
      
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows users to manage fabrications for their ingredients.
     * @path /users/{userId}/ingredients/{ingredientId}/fabrications/{fabricationId}
     * @allow (create) - Authenticated user can create a fabrication for their ingredient.
     * @allow (get) - Authenticated user can read their own fabrication.
     * @allow (update) - Authenticated user can update their own fabrication.
     * @allow (delete) - Authenticated user can delete their own fabrication.
     * @deny (create) - User cannot create a fabrication for another user's ingredient.
     * @deny (update) - User cannot update another user's fabrication.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/ingredients/{ingredientId}/fabrications/{fabricationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource.data != null;
      }
      
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows users to manage fabrication yields for their fabrications.
     * @path /users/{userId}/ingredients/{ingredientId}/fabrications/{fabricationId}/fabricationYields/{fabricationYieldId}
     * @allow (create) - Authenticated user can create a fabrication yield for their fabrication.
     * @allow (get) - Authenticated user can read their own fabrication yield.
     * @allow (update) - Authenticated user can update their own fabrication yield.
     * @allow (delete) - Authenticated user can delete their own fabrication yield.
     * @deny (create) - User cannot create a fabrication yield for another user's fabrication.
     * @deny (update) - User cannot update another user's fabrication yield.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/ingredients/{ingredientId}/fabrications/{fabricationId}/fabricationYields/{fabricationYieldId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource.data != null;
      }
      
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

     /**
      * @description  Allow public read access to the "outlets" collection (top-level).
      * @path /outlets
      * @allow (get) - Anyone can read outlet information.
      * @principle Public read.
      */
    match /outlets/{outletId} {
        allow get: if true;
        allow list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }
  }
}