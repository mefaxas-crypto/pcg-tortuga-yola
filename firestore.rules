/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for most data, with public read access for Allergens.
 * All user-specific data is nested under `/users/{userId}`.
 *
 * Data Structure:
 * - `/users/{userId}`: Contains user profiles. Only the authenticated user can access their own profile.
 * - `/users/{userId}/outlets/{outletId}`: Contains outlets owned by a specific user.
 * - `/users/{userId}/outlets/{outletId}/inventoryItems/{inventoryItemId}`: Contains inventory items for a specific outlet.
 * - `/users/{userId}/ingredients/{ingredientId}`: Contains ingredients managed by a specific user.
 * - `/allergens/{allergenId}`: Contains allergens. Publicly readable, write access restricted.
 * - `/users/{userId}/recipes/{recipeId}`: Contains recipes created by a specific user.
 * - `/users/{userId}/recipes/{recipeId}/recipeIngredients/{recipeIngredientId}`: Contains recipe ingredients for a specific recipe.
 * - `/users/{userId}/outlets/{outletId}/menuItems/{menuItemId}`: Contains menu items for a specific outlet.
 * - `/users/{userId}/outlets/{outletId}/salesLogs/{salesLogId}`: Contains sales logs for a specific outlet.
 * - `/users/{userId}/outlets/{outletId}/stockTakes/{stockTakeId}`: Contains stock take events for a specific outlet.
 * - `/users/{userId}/outlets/{outletId}/stockTakes/{stockTakeId}/stockTakeItems/{stockTakeItemId}`: Contains stock take items for a specific stock take event.
 * - `/users/{userId}/ingredients/{ingredientId}/fabrications/{fabricationId}`: Contains fabrications for a specific ingredient.
 * - `/users/{userId}/ingredients/{ingredientId}/fabrications/{fabricationId}/fabricationYields/{fabricationYieldId}`: Contains fabrication yields for a specific fabrication.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Allergens are publicly readable but only writable by admins (admin role management is assumed to be handled externally).
 * - Default security posture for ambiguous relationships is strict owner-only access.
 *
 * Denormalization for Authorization:
 *  - Outlet documents contain a `userId` field to directly link them to their owner, avoiding the need for `get()` calls to a separate `/users/{userId}` document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user with matching userId can create their profile.
     * @allow (get, list, update, delete) - Authenticated user with matching userId can access their profile.
     * @deny (create) - Authenticated user cannot create a profile with a mismatched userId.
     * @deny (get, list, update, delete) - Authenticated user cannot access another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Authentication Helper
      function isSignedIn() {
        return request.auth != null;
      }

      // Authorization Helper
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to outlets owned by a specific user.
     * @path /users/{userId}/outlets/{outletId}
     * @allow (create) - Authenticated user with matching userId can create an outlet.
     * @allow (get, list, update, delete) - Authenticated user with matching userId can access their outlets.
     * @deny (create) - Authenticated user cannot create an outlet with a mismatched userId.
     * @deny (get, list, update, delete) - Authenticated user cannot access another user's outlets.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/outlets/{outletId} {
       // Authentication Helper
      function isSignedIn() {
        return request.auth != null;
      }

      // Authorization Helper
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId) && resource.data.userId == userId;
    }

    /**
     * @description Controls access to inventory items for a specific outlet.
     * @path /users/{userId}/outlets/{outletId}/inventoryItems/{inventoryItemId}
     * @allow (create) - Authenticated user with matching userId can create an inventory item.
     * @allow (get, list, update, delete) - Authenticated user with matching userId can access inventory items in their outlets.
     * @deny (create) - Authenticated user cannot create an inventory item with a mismatched userId or outletId.
     * @deny (get, list, update, delete) - Authenticated user cannot access inventory items in another user's outlets.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/outlets/{outletId}/inventoryItems/{inventoryItemId} {
       // Authentication Helper
      function isSignedIn() {
        return request.auth != null;
      }

      // Authorization Helper
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to ingredients managed by a specific user.
     * @path /users/{userId}/ingredients/{ingredientId}
     * @allow (create) - Authenticated user with matching userId can create an ingredient.
     * @allow (get, list, update, delete) - Authenticated user with matching userId can access their ingredients.
     * @deny (create) - Authenticated user cannot create an ingredient with a mismatched userId.
     * @deny (get, list, update, delete) - Authenticated user cannot access another user's ingredients.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/ingredients/{ingredientId} {
       // Authentication Helper
      function isSignedIn() {
        return request.auth != null;
      }

      // Authorization Helper
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to allergens. Publicly readable, but write access restricted.
     * @path /allergens/{allergenId}
     * @allow (get, list) - Any user can read allergens.
     * @deny (create, update, delete) - Only admins can write allergens (admin role is assumed to be managed externally).
     * @principle Public read access with restricted write access.
     */
    match /allergens/{allergenId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to recipes created by a specific user.
     * @path /users/{userId}/recipes/{recipeId}
     * @allow (create) - Authenticated user with matching userId can create a recipe.
     * @allow (get, list, update, delete) - Authenticated user with matching userId can access their recipes.
     * @deny (create) - Authenticated user cannot create a recipe with a mismatched userId.
     * @deny (get, list, update, delete) - Authenticated user cannot access another user's recipes.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/recipes/{recipeId} {
       // Authentication Helper
      function isSignedIn() {
        return request.auth != null;
      }

      // Authorization Helper
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to recipe ingredients for a specific recipe.
     * @path /users/{userId}/recipes/{recipeId}/recipeIngredients/{recipeIngredientId}
     * @allow (create) - Authenticated user with matching userId can create a recipe ingredient.
     * @allow (get, list, update, delete) - Authenticated user with matching userId can access recipe ingredients in their recipes.
     * @deny (create) - Authenticated user cannot create a recipe ingredient with a mismatched userId or recipeId.
     * @deny (get, list, update, delete) - Authenticated user cannot access recipe ingredients in another user's recipes.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/recipes/{recipeId}/recipeIngredients/{recipeIngredientId} {
       // Authentication Helper
      function isSignedIn() {
        return request.auth != null;
      }

      // Authorization Helper
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to menu items for a specific outlet.
     * @path /users/{userId}/outlets/{outletId}/menuItems/{menuItemId}
     * @allow (create) - Authenticated user with matching userId can create a menu item.
     * @allow (get, list, update, delete) - Authenticated user with matching userId can access menu items in their outlets.
     * @deny (create) - Authenticated user cannot create a menu item with a mismatched userId or outletId.
     * @deny (get, list, update, delete) - Authenticated user cannot access menu items in another user's outlets.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/outlets/{outletId}/menuItems/{menuItemId} {
       // Authentication Helper
      function isSignedIn() {
        return request.auth != null;
      }

      // Authorization Helper
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to sales logs for a specific outlet.
     * @path /users/{userId}/outlets/{outletId}/salesLogs/{salesLogId}
     * @allow (create) - Authenticated user with matching userId can create a sales log.
     * @allow (get, list, update, delete) - Authenticated user with matching userId can access sales logs in their outlets.
     * @deny (create) - Authenticated user cannot create a sales log with a mismatched userId or outletId.
     * @deny (get, list, update, delete) - Authenticated user cannot access sales logs in another user's outlets.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/outlets/{outletId}/salesLogs/{salesLogId} {
       // Authentication Helper
      function isSignedIn() {
        return request.auth != null;
      }

      // Authorization Helper
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to stock take events for a specific outlet.
     * @path /users/{userId}/outlets/{outletId}/stockTakes/{stockTakeId}
     * @allow (create) - Authenticated user with matching userId can create a stock take event.
     * @allow (get, list, update, delete) - Authenticated user with matching userId can access stock take events in their outlets.
     * @deny (create) - Authenticated user cannot create a stock take event with a mismatched userId or outletId.
     * @deny (get, list, update, delete) - Authenticated user cannot access stock take events in another user's outlets.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/outlets/{outletId}/stockTakes/{stockTakeId} {
       // Authentication Helper
      function isSignedIn() {
        return request.auth != null;
      }

      // Authorization Helper
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to stock take items for a specific stock take event.
     * @path /users/{userId}/outlets/{outletId}/stockTakes/{stockTakeId}/stockTakeItems/{stockTakeItemId}
     * @allow (create) - Authenticated user with matching userId can create a stock take item.
     * @allow (get, list, update, delete) - Authenticated user with matching userId can access stock take items in their outlets.
     * @deny (create) - Authenticated user cannot create a stock take item with a mismatched userId or outletId.
     * @deny (get, list, update, delete) - Authenticated user cannot access stock take items in another user's outlets.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/outlets/{outletId}/stockTakes/{stockTakeId}/stockTakeItems/{stockTakeItemId} {
       // Authentication Helper
      function isSignedIn() {
        return request.auth != null;
      }

      // Authorization Helper
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to fabrications for a specific ingredient.
     * @path /users/{userId}/ingredients/{ingredientId}/fabrications/{fabricationId}
     * @allow (create) - Authenticated user with matching userId can create a fabrication.
     * @allow (get, list, update, delete) - Authenticated user with matching userId can access fabrications for their ingredients.
     * @deny (create) - Authenticated user cannot create a fabrication with a mismatched userId or ingredientId.
     * @deny (get, list, update, delete) - Authenticated user cannot access fabrications for another user's ingredients.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/ingredients/{ingredientId}/fabrications/{fabricationId} {
       // Authentication Helper
      function isSignedIn() {
        return request.auth != null;
      }

      // Authorization Helper
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to fabrication yields for a specific fabrication.
     * @path /users/{userId}/ingredients/{ingredientId}/fabrications/{fabricationId}/fabricationYields/{fabricationYieldId}
     * @allow (create) - Authenticated user with matching userId can create a fabrication yield.
     * @allow (get, list, update, delete) - Authenticated user with matching userId can access fabrication yields for their fabrications.
     * @deny (create) - Authenticated user cannot create a fabrication yield with a mismatched userId or fabricationId.
     * @deny (get, list, update, delete) - Authenticated user cannot access fabrication yields for another user's fabrications.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/ingredients/{ingredientId}/fabrications/{fabricationId}/fabricationYields/{fabricationYieldId} {
       // Authentication Helper
      function isSignedIn() {
        return request.auth != null;
      }

      // Authorization Helper
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}